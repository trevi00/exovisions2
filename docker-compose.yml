# Docker Compose for Exoplanet Detection Application
# Production-ready setup with all services

networks:
  exoplanet-network:
    driver: bridge

volumes:
  postgres-data:
  prometheus-data:
  grafana-data:

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: exoplanet-database
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-exoplanet_db}
      POSTGRES_USER: ${POSTGRES_USER:-exoplanet}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-change_me_in_production}
      POSTGRES_INITDB_ARGS: "-E UTF8"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - exoplanet-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-exoplanet}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: exoplanet-backend
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-exoplanet}:${POSTGRES_PASSWORD:-change_me_in_production}@database:5432/${POSTGRES_DB:-exoplanet_db}

      # Application
      DEBUG: ${DEBUG:-False}
      HOST: 0.0.0.0
      PORT: 8000

      # CORS
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:19006}

      # ML Model
      MODEL_PATH: /app/models/exoplanet_multiclass_model.pkl
      SCALER_PATH: /app/models/scaler.pkl
    volumes:
      - ./backend/models:/app/models:ro
      - ./backend/data:/app/data
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    networks:
      - exoplanet-network
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend (React Native Web)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: exoplanet-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    networks:
      - exoplanet-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Prometheus (Metrics Collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: exoplanet-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - exoplanet-network
    depends_on:
      - backend

  # Grafana (Monitoring Dashboard)
  grafana:
    image: grafana/grafana:latest
    container_name: exoplanet-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:${GRAFANA_PORT:-3001}
      - GF_INSTALL_PLUGINS=
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - exoplanet-network
    depends_on:
      - prometheus
